#!/bin/sh
##############################################################
url='http://llvm.org/releases/3.4.1/llvm-3.4.1.src.tar.gz
     http://llvm.org/releases/3.4.1/cfe-3.4.1.src.tar.gz
     http://llvm.org/releases/3.4/compiler-rt-3.4.src.tar.gz
     http://llvm.org/releases/3.4/lldb-3.4.src.tar.gz
     http://llvm.org/releases/3.4/polly-3.4.src.tar.gz
     http://llvm.org/releases/3.4/clang-tools-extra-3.4.src.tar.gz
     '
pkgbase=llvm
vers=3.4.1
arch=x86_64
# arch=i586
build=P1
src=llvm-3.4.1.src
src_clang=cfe-3.4.1.src
src_runtime=compiler-rt-3.4
#src_lldb=lldb-3.4
src_polly=polly-3.4
src_extra=clang-tools-extra-3.4
prefix=/usr
OPT_CONFIG="-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release \
 -DLLVM_HOST_TRIPLE=${arch}-pc-linux-gnu \
 -DLLVM_EXTERNAL_CLANG_SOURCE_DIR=../$src_clang \
 -DLLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR=../$src_extra \
 -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR=../$src_runtime \
 -DLLVM_EXTERNAL_LLDB_SOURCE_DIR=../$src_lldb \
 -DLLVM_EXTERNAL_POLLY_SOURCE_DIR=../$src_polly \
"
DOCS='CODE_OWNERS.TXT CREDITS.TXT LICENSE.TXT README.txt'
patchfiles=''
compress=txz
##############################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_all() {
  for chk in `find . ` ; do
    chk_elf=`file $chk | grep ELF`
    if [ "$chk_elf.x" != ".x" ]; then
      chk_lib=`echo $chk | grep lib`
      if [ "$chk_lib.x" != ".x" ]; then
         echo "stripping $chk with -g "
         strip -g $chk
      else
         echo "stripping $chk"
         strip $chk
      fi
    fi
  done
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress_all() {
  cd $P
  strip_all
}  

W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} 
  if [ $arch = "x86_64" ]; then
      B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
  else
      B[$i]=$W/build32`test ${#src[@]} -eq 1 || echo $i`
  fi      
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/X11R7/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
    target="-m64"
    libdir="lib64"
    suffix="64"
else
    target="-m32"
    libdir="lib"
    suffix=""
fi

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then wget $i ; fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xvpf ${i##*/} ;;
    gz) tar xvpzf ${i##*/} ;;
    tgz) tar xvpzf ${i##*/} ;;
    bz2) tar xvpjf ${i##*/} ;;
    zip) unzip ${i##*/} ;;
    jar) mkdir -p $src; cp -f ${i##*/} $src/ ;;
    esac
  done
fi

if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; #cp -a ${S[$i]} ${B[$i]}
    mkdir ${B[$i]}
  done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    #cp -a ../${src_clang} tools/clang
    #cp -a ../${src_runtime} projects/compiler-rt
    #cp -a ../${src_lldb} tools/lldb
    #cp -a ../${src_polly} tools/polly
    #cp -a ../${src_extra} tools/clang/tools/extra
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
    done

    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi

      if [ -x configure ] ; then
         export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
         export LDFLAGS='-Wl,--as-needed' 
         export CC="gcc -isystem /usr/include $target" 
         export CXX="g++ -isystem /usr/include $target "
         ./configure --prefix=$prefix --libdir=$prefix/${libdir} --sysconfdir=/etc --localstatedir=/var --mandir='${prefix}'/share/man ${OPT_CONFIG[$i]}
      elif [ -f ${S[$i]}/CMakeLists.txt ] ; then
         export PKG_CONFIG_PATH=/usr/${libdir}/pkgconfig:/usr/share/pkgconfig:/opt/kde/${libdir}/pkgconfig
         export LDFLAGS='-Wl,--as-needed' 
         export CC="gcc -isystem /usr/include $target" 
         export CXX="g++ -isystem /usr/include $target "
         #cmake -DCMAKE_INSTALL_PREFIX:PATH=$prefix -DLLVM_LIBDIR_SUFFIX=$suffix ${OPT_CONFIG[$i]} ${S[$i]}
         cmake -DCMAKE_INSTALL_PREFIX:PATH=$prefix ${OPT_CONFIG[$i]} ${S[$i]}
     fi
      if [ $? != 0 ]; then
	  echo "configure error. $0 script stop"
	  exit 255
      fi
  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    pushd ${B[$i]}
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make -j2
    fi
    popd
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for mk in `find . -name "[Mm]akefile" ` ; do
        sed -i -e 's|GCONFTOOL = /usr/bin/gconftool-2|GCONFTOOL = echo|' $mk
    done
    if [ -f Makefile ] ; then
      export LDFLAGS='-Wl,--as-needed'
      make install DESTDIR=$P
    fi
  done
######################################################################
# * make install でコピーされないファイルがある場合はここに記述します。
######################################################################
  mkdir -p $docdir/$src
  if [ -d $P/usr/share/omf ]; then
      mkdir -p $P/install
      for omf in $P/usr/share/omf/* ; do
	omf_name=`basename $omf`
	cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/scrollkeeper-update ]; then
    scrollkeeper-update -p /var/lib/rarian -o /usr/share/omf/$omf_name
fi
EOF
      done
  fi

  if [ -d $P/etc/gconf/schemas ]; then
      mkdir -p $P/install
      for schema in $P/etc/gconf/schemas/* ; do
          cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/gconftool-2 ]; then
    ( cd /etc/gconf/schemas ; GCONF_CONFIG_SOURCE=xml:merged:/etc/gconf/gconf.xml.defaults /usr/bin/gconftool-2 --makefile-install-rule `basename $schema` )
fi
EOF
      done
  fi

# remove locales except ja
# 
  for loc_dir in `find $P -name locale` ; do
      pushd $loc_dir
      for loc in * ; do
          if [ "$loc" != "ja" -a "$loc" != "ja_JP" -a "$loc" != "ja_JP.EUC-JP"  -a "$loc" != "ja_JP.UTF-8" ]; then
              rm -rf $loc
          fi
      done
      popd
   done      

######################################################################
# path に lib があるバイナリは strip -g, ないバイナリは strip する
######################################################################
  cd $P
  compress_all
  if [ -d $P/usr/share/man ]; then
      for mdir in `find $P/usr/share/man -name man[0-9mno] -type d`; do
          gzip_dir $mdir
      done
  fi
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  cd $W
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
      cp $W/$patch $docdir/$src/$patch
      gzip_one $docdir/$src/$patch
  done

############################################################
#   /usr/share/doc 以下には一般ユーザのIDのままのファイルが
#   紛れこみがちなので
############################################################

  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root $P/usr/share/doc
  fi

######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  # make clang into another package
  P2=../clang-work
  if [ -d $P2 ]; then rm -rf $P2; fi
  if [ -f ./$prefix/bin/clang ]; then
      mkdir -p $P2/$prefix/bin
      mv -v ./$prefix/bin/clang* $P2/$prefix/bin/
      mv -v ./$prefix/bin/git-clang-format $P2/$prefix/bin/
      mkdir -p $P2/$prefix/include
      mv -v ./$prefix/include/clang-c $P2/$prefix/include/
      mv -v ./$prefix/include/clang $P2/$prefix/include/
      #mkdir -p $P2/$prefix/${libdir}
      #mv -v ./$prefix/${libdir}/clang $P2/$prefix/${libdir}/
      #mv -v ./$prefix/${libdir}/libclang* $P2/$prefix/${libdir}/
      mkdir -p $P2/$prefix/lib
      mv -v ./$prefix/lib/clang $P2/$prefix/lib/
      mv -v ./$prefix/lib/libclang* $P2/$prefix/lib/
      mkdir -p $P2/$prefix/share
      mv -v ./$prefix/share/clang $P2/$prefix/share/
  fi
  #if [ -f ./$prefix/${libdir}/libmodernizeCore.so ]; then
  #    mv -v ./$prefix/${libdir}/libmodernizeCore.so $P2/$prefix/${libdir}/
  if [ -f ./$prefix/lib/libmodernizeCore.so ]; then
      mv -v ./$prefix/lib/libmodernizeCore.so $P2/$prefix/lib/
  fi
  if [ -f ./$prefix/lib/LLVMPolly.so ]; then
      mkdir -p $P2/$prefix/include
      mv -v ./$prefix/include/polly $P2/$prefix/include/
      mkdir -p $P2/$prefix/lib
      mv -v ./$prefix/lib/LLVMPolly.so $P2/$prefix/lib/
      mv -v ./$prefix/lib/libLLVMPolly* $P2/$prefix/lib/
  fi

  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF
  pushd $P/$P2
  /sbin/makepkg ../clang-${vers}-${arch}-${build}.$compress <<EOF
y
1
EOF
  popd

fi
